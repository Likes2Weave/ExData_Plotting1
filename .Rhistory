s
tapply(iris,iris$Species,colMeans)
apply(iris,2,mean)
apply(iris,2,mean, na.rm=TRUE)
apply(iris[,1:4],2,mean)
s
l
apply(l$setosa[,1:4],2,mean)
apply(iris[,1:4],2,mean)
colMeans(iris)
colMeans(iris[,1;4])
colMeans(iris[,1:4])
lapply(iris[,1:4],mean)
sapply(iris[,1:4],mean)
below_ave <- function(x) { ave <- mean(x) return[x[x > ave]]}
below_ave <- function(x) { ave <- mean(x) return[x[x > ave]]}
below_ave <- function(x) {
ave <- mean(x)
return(x[x > ave])
}
below_ave(iris$Sepal.Length)
tapply(iris$Sepal.Width, iris$Species, median)
tapply(iris$Sepal.Width, iris$Species, mean)
apply(l$setosa[,1:4],2,mean)
data(beavers)
str(beaver1)
apply(t(beaver1),1,max)
apply(mtcars,2,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
by(iris[,1:4],iris$Species,colMeans)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
str(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636 - 209.21429
ls()
install.packages("RMySQL"); library(RMySQL)
install.packages("RMySQL")
install.packages(c("callr", "caTools", "cli", "colorspace", "fs", "git2r", "glue", "knitr", "lazyeval", "Matrix", "openssl", "processx", "purrr", "Rcpp", "RCurl", "readxl", "rmarkdown", "rstudioapi", "stringi", "sys", "tibble", "tidyr", "tinytex"))
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(RMySQL)
ucsc <- dbConnect(MySQL(),user = "genome", host="genome-mysql.soe.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
ucsc <- dbConnect(MySQL(),user = "genome", db="hg19",host="genome-mysql.soe.ucsc.edu")
allTables <- dbListTables(hg19)
ucsc <- dbConnect(MySQL(),user = "genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
ucsc <- dbConnect(RMySQL::MySQL(),dbname="test",host="genome-mysql.cse.ucsc.edu", user = "genome")
ucsc <- dbConnect(RMySQL::MySQL(),host="genome-mysql.cse.ucsc.edu", user = "genome")
dbListTables(ucsc)
ucsc <- dbConnect(RMySQL::MySQL(), dbname="ailMel1", host="genome-mysql.cse.ucsc.edu", user = "genome")
dbListTables(ucsc)
ucsc_hg <- dbConnect(RMySQL::MySQL(), dbname="hg19", host="genome-mysql.cse.ucsc.edu", user = "genome")
dbListTables(ucsc_hg)
allTables <- dbListTables(ucsc_hg)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbListFields(ucsc_hg, "affyU133Plus2")
dbGetQuery(ucsc_hg, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(ucsc_hg, "affyU133Plus2")
warnings()
head(affyData)
query <- dbSendQuery(ucsc_hg, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);quantile((affyMis$misMatches))
affyMisSmall <- fetch(query, n=10); dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(ucsc)
dbDisconnect(ucsc_hg)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
library(XML)
install.packages("RCurl")
library(RCurl)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
url <- getURL("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en",ssl.verifyPeer=FALSE)
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
l<-xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
l
html
url <- getURL("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&amp;hl=en",ssl.verifyPeer=FALSE)
xpathSApply(html, "//title", xmlValue)
l<-xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
l
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&amp;hl=en"
url <- getURL("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&amp;hl=en")
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
html <- htmlParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@class = 'gsc_a_c']", xmlValue)
library(httr)
html2 = GET(url)
html2 <- GET(url)
url
url <- getURL("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html2 <- GET(url)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html2 <- GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(parsedHtml, "//td[@class = 'gsc_a_c']", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd"))
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
library("curl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(readr)
getdata_data_EDSTATS_Country <- read_csv("~/Professional/DataScience/Course3/data/getdata_data_EDSTATS_Country.csv")
View(getdata_data_EDSTATS_Country)
library(readr)
getdata_data_GDP <- read_csv("~/Professional/DataScience/Course3/data/getdata_data_GDP.csv")
View(getdata_data_GDP)
library(readr)
getdata_data_GDP <- read_csv("~/Professional/DataScience/Course3/data/getdata_data_GDP.csv",
col_types = cols(X2 = col_integer()),
skip = 4)
View(getdata_data_GDP)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
getdata_data_EDSTATS_Country <- read_csv("~/Professional/DataScience/Course3/data/getdata_data_EDSTATS_Country.csv")
View(getdata_data_EDSTATS_Country)
View(getdata_data_EDSTATS_Country)
newDF <- merge(getdata_data_EDSTATS_Country, getdata_data_GDP, by.x = "Country Code", by.y = "X1, all=FALSE")
newDF <- merge(getdata_data_EDSTATS_Country, getdata_data_GDP, by.x = "Country Code", by.y = "X1", all=FALSE)
newDF <- merge(getdata_data_EDSTATS_Country, getdata_data_GDP, by.x = "CountryCode", by.y = "X1", all=FALSE)
View(newDF)
View(getdata_data_GDP)
View(getdata_data_GDP)
View(getdata_data_EDSTATS_Country)
View(newDF)
cleanGDPRank <- filter(newDF, !is.na(X2))
cleanGDPRank <- filter(getdata_data_GDP, !is.na(X2))
cleanGDPRank <- filter(getdata_data_GDP, !is.na(X1))
cleanGDPRank <- filter(getdata_data_GDP, !is.na(getdata_data_GDP$X1))
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
cleanGDPRank <- filter(getdata_data_GDP, !is.na(X1))
View(cleanGDPRank)
cleanGDPRank <- filter(getdata_data_GDP, (!is.na(X1) | !is.na(X2))
)
View(cleanGDPRank)
cleanGDPRank <- filter(getdata_data_GDP, !is.na(X2) )
View(getdata_data_GDP)
merge(cleanGDPRank, getdata_data_EDSTATS_Country, by.x = "X1", by.y = "CountryCode", all=FALSE)
newDF <- merge(cleanGDPRank, getdata_data_EDSTATS_Country, by.x = "X1", by.y = "CountryCode", all=FALSE)
View(newDF)
newDF <- arrange(newDF, X2)
View(newDF)
newDF <- arrange(newDF, desc(X2))
View(newDF)
group_by(newDF, "Income Group")
source('~/Professional/DataScience/Course3/Week3.R')
source('~/Professional/DataScience/Course3/Week3.R')
View(newDF_IG)
source('~/Professional/DataScience/Course3/Week3.R')
View(newDF_IG)
source('~/Professional/DataScience/Course3/Week3.R')
View(newDF_IG)
View(newDF_IG)
source('~/Professional/DataScience/Course3/Week3.R')
source('~/Professional/DataScience/Course3/Week3-q5.R')
View(newDF_IG2)
source('~/Professional/DataScience/Course3/Week3-q5.R')
View(newDF_IG2)
source('~/Professional/DataScience/Course3/Week3-q5.R')
source('~/Professional/DataScience/Course3/Week3-q5.R')
source('~/Professional/DataScience/Course3/Week3-q5.R')
View(newDF_IG2)
ntile(newDF_IG2, 5)
source('~/Professional/DataScience/Course3/Week3-q5.R')
View(newDF_five)
library(reshape2)
ls()
rm(list=ls())
(swirl)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("1989 May 17")
mdy("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 11, minutes = 36, seconds = 55)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minures=34)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
last_time %--% arrive
how_long <- last_time %--% arrive
interval(last_time, end = arrive, tzone = tz(last_time))
interval(last_time, end = arrive)
how_long <- interval(last_time, end = arrive)
as.period(how_long)
stopwatch()
library(readr)
getdata_data_ss06hid <- read_csv("~/Professional/DataScience/Course3/data/getdata_data_ss06hid.csv")
View(getdata_data_ss06hid)
R <- getdata_data_ss06hid
strsplit(R, "wgtp")
strsplit(R, c("wgtp"))
strsplit(names(R), "wgtp")
number1 <- strsplit(names(R), "wgtp")
str(number1)
class(number1)
View(number1)
names(R)
library(readr)
getdata_data_GDP <- read_csv("~/Professional/DataScience/Course3/data/getdata_data_GDP.csv",
col_names = FALSE, skip = 5)
View(getdata_data_GDP)
GDPData <- getdata_data_GDP[1:190]
GDPData <- getdata_data_GDP[1:190,]
View(GDPData)
GDPData$X5 <- as.numeric(GDPData$X5)
> GDPData <- getdata_data_GDP[1:190,]
GDPData <- getdata_data_GDP[1:190,]
GDPData$X5 <- gsub(",", "",  GDPData$X5)
GDPData$X5 <- as.numeric(GDPData$X5)
mean(GDPData$X5)
countryNames <- GDPData$X4
grep("^United",countryNames), 3
grep("^United",countryNames)
grep("United$",countryNames)
c<-grep("United$",countryNames)
c
library(readr)
getdata_data_EDSTATS_Country <- read_csv("~/Professional/DataScience/Course3/data/getdata_data_EDSTATS_Country.csv")
View(getdata_data_EDSTATS_Country)
View(getdata_data_EDSTATS_Country)
View(GDPData)
allData <- merge(GDPData, getdata_data_EDSTATS_Country, by.x = "X1", by.y = "CountryCode")
View(allData)
fiscalString <- "Fiscal year end: June"
fiscalJune <- grep(fiscalString, allData[,19])
fiscalJune
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)no
library(quantmod)
install.packages("quantmod")
amzn = getSymbols("AMZN",auto.assign=FALSE)
library(quantmod)
> install.packages('quantmod')
install.packages('quantmod')
library("curl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages('quantmod')
install.packages(libcurl)
install.packages("zoo")
install.packages("zoo")
install.packages("quantmod")
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
amzn <- getSymbols("AMZN")
library("quantmod")
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
grep("2012", sampleTimes)
str(sampleTimes)
sample2015 <- grep("2012", sampleTimes)
is2012 <- grep("2012", sampleTimes)
sample2012 <- sampleTimes[sample2012,]
sample2012 <- sampleTimes[,sample2012]
sample2012 <- sampleTimes[sample2012]
sample2012 <- sampleTimes[is2012]
sample2012_dates <- ymd(sample2012)
sample2012_days <- days(sample2012)
sample2012_days <- day(sample2012)
ls()
rm(list=ls())
detach("package:DBI", unload=TRUE)
detach("package:RMySQL", unload=TRUE)
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main="Old Faitful")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
dim(low)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta" lwd=4)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col+"wheat",main="Number of Counties in Each Region")
barplot(reg, col="wheat",main="Number of Counties in Each Region")
boxplot(formula=pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col="green")
hist((subset(pollution, region == "west")), col="green")
hist(subset(pollution, region == "west"), col="green")
hist((subset(pollution, region == "west"))$pm25, col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(lattitude, pm25))
with(pollution, plot(latitude, pm25))
with(pollution, plot(latitude, pm25, lwd=2, lty=2))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude (x-axis), west$pm25 (y-axis), main="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
command pdf(file="myplot.pdf")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,"geyserplot.png" )
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(car$speed), max(cars$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot(displ, hwy, data=mpg)
ggplot(displ, hwy, data="mpg")
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
table(airquality$Month)
boxplot(Ozone~Month, data=airquality)
boxplot(Ozone~Month, data=airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, type="n",airquality$Ozone)
plot(airquality$Wind, airquality$Ozone)
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month == "5")
may <- subset(airquality, Month == 5)
points(wind, ozone, pch=17, col="blue")
points(airquality$wind, airquality$ozone, pch=17, col="blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright", c(17,8), c("blue","red"), c("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
abline(v=median(airquality$Wind, lty=2, lwd=2))
abline(v=median(airquality$Wind), lty=2, lwd=2))
abline(v = median(airquality$Wind), lty=2, lwd=2))
abline(v = median(airquality$Wind, na.rm=TRUE), lty=2, lwd=2))
abline(v = median(airquality$Wind, na.rm=TRUE), lty=2, lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar,R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
setwd("~/GitHub/datasciencecoursera/Course4")
household_power_consumption <- read.csv("~/GitHub/datasciencecoursera/Course4/household_power_consumption.txt", sep=";", stringsAsFactors=FALSE)
View(household_power_consumption)
household_power_consumption <- read.csv("~/GitHub/datasciencecoursera/Course4/household_power_consumption.txt", sep=";", quote = "")
household_power_consumption <- read.csv("~/GitHub/datasciencecoursera/Course4/household_power_consumption.txt", sep=";", na.strings = "?")
household_power_asDate <- mutate(household_power_consumption, Date = as.Date(Date, "%d/%m/%Y"))
library(dplyr)
household_power_asDate <- mutate(household_power_consumption, Date = as.Date(Date, "%d/%m/%Y"))
View(household_power_consumption)
View(household_power_asDate)
target_dates <- subset(household_power_asDate, (Date == "2007-02-01" | Date == "2007-02-02"), select = c(Global_active_power))
View(target_dates)
View(target_dates)
hist(target_dates$Global_active_power, breaks = 12, freq = TRUE, col = "red")
hist(target_dates$Global_active_power, breaks = 12, freq = TRUE, col = "red", main = "Global Active Power", xlab="Global Active Power (kilowatts")
hist(target_dates$Global_active_power, breaks = 12, freq = TRUE, col = "red", main = "Global Active Power", xlab="Global Active Power (kilowatts)", ylim=c(0,1300))
hist(target_dates$Global_active_power, breaks = 12, freq = TRUE, col = "red", main = "Global Active Power", xlab="Global Active Power (kilowatts")
source('~/GitHub/datasciencecoursera/Course4/ExData_Plotting1/plot1.R')
source('~/GitHub/datasciencecoursera/Course4/ExData_Plotting1/plot1.R')
source('~/GitHub/datasciencecoursera/Course4/ExData_Plotting1/plot1.R')
source('~/GitHub/datasciencecoursera/Course4/ExData_Plotting1/plot1.R')
source('~/GitHub/datasciencecoursera/Course4/ExData_Plotting1/plot1.R')
setwd("~/GitHub/datasciencecoursera/Course4/ExData_Plotting1")
source('~/GitHub/datasciencecoursera/Course4/ExData_Plotting1/plot1.R')
source('~/GitHub/datasciencecoursera/Course4/ExData_Plotting1/plot2.R')
household_power_asDate <- mutate(household_power_consumption, Date = as.Date(Date, "%d/%m/%Y"))
target_dates <- subset(household_power_asDate, (Date == "2007-02-01" | Date == "2007-02-02"), select = c(Date, Global_active_power))
plot(target_dates)
plot(target_dates, type = "l")
plot(target_dates, type = "b")
plot(target_dates, type = "p")
household_power_asDate_TIme <- mutate(household_power_consumption, Date_Time = paste(Date, Time))
household_power_Date_Time <- mutate(household_power_consumption, Date_Time = paste(Date, Time))
View(household_power_Date_Time)
household_power_Date_Time <- mutate(household_power_Date_Time, Date = strptime(Date_Time, "%d/%m/%Y %H:%M:%S"))
household_power_Date_Time <- mutate(household_power_Date_Time, Date = as.Date(Date_Time, "%d/%m/%Y %H:%M:%S"))
household_power_Date_Time <- mutate(household_power_Date_Time, Date_Time = strptime(Date_Time, "%d/%m/%Y %H:%M:%S"))
household_power_Date_Time <- mutate(household_power_Date_Time, Date = as.POSIXct(Date_Time, "%d/%m/%Y %H:%M:%S"))
